<template>
  <div>
    <h1>User Management</h1>
    <UserTable />
  </div>
</template>

<script setup lang="ts">
import UserTable from '../components/UserTable.vue'
</script><template>
  <div v-if="isOpen" style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); display: flex; align-items: center; justify-content: center;">
    <div style="background: white; padding: 20px; border-radius: 8px; width: 400px;">
      <h3>{{ isEditing ? 'Edit User' : 'Add User' }}</h3>
      
      <form @submit.prevent="handleSubmit">
        <div style="margin-bottom: 15px;">
          <label style="display: block; margin-bottom: 5px;">First Name:</label>
          <input 
            v-model="form.firstName" 
            type="text" 
            required 
            style="width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 4px;"
          />
        </div>
        
        <div style="margin-bottom: 15px;">
          <label style="display: block; margin-bottom: 5px;">Last Name:</label>
          <input 
            v-model="form.lastName" 
            type="text" 
            required 
            style="width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 4px;"
          />
        </div>
        
        <div style="margin-bottom: 15px;">
          <label style="display: block; margin-bottom: 5px;">Email:</label>
          <input 
            v-model="form.email" 
            type="email" 
            required 
            style="width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 4px;"
          />
        </div>
        
        <div style="display: flex; gap: 10px; justify-content: flex-end;">
          <button type="button" @click="closeForm" style="padding: 8px 16px; border: 1px solid #ccc; background: white; border-radius: 4px; cursor: pointer;">
            Cancel
          </button>
          <button type="submit" style="padding: 8px 16px; background: #007bff; color: white; border: none; border-radius: 4px; cursor: pointer;">
            {{ isEditing ? 'Update' : 'Add' }}
          </button>
        </div>
      </form>
    </div>
  </div>
</template>

<script setup lang="ts">
import type { User } from '../types/user'
import { useUsersStore } from '../store/users'
import { computed, reactive, watch } from 'vue'

interface Props {
  isOpen: boolean
  user?: User | null
}

const props = defineProps<Props>()
const emit = defineEmits<{
  close: []
}>()

const usersStore = useUsersStore()

const isEditing = computed(() => !!props.user)

const form = reactive({
  firstName: '',
  lastName: '',
  email: ''
})

const resetForm = () => {
  form.firstName = ''
  form.lastName = ''
  form.email = ''
}

const closeForm = () => {
  resetForm()
  emit('close')
}

const handleSubmit = () => {
  if (isEditing.value && props.user) {
    usersStore.updateUser(props.user.id, {
      firstName: form.firstName,
      lastName: form.lastName,
      email: form.email,
      lastVisitedAt: Math.floor(Date.now() / 1000)
    })
  } else {
    usersStore.addUser({
      firstName: form.firstName,
      lastName: form.lastName,
      email: form.email,
      lastVisitedAt: Math.floor(Date.now() / 1000)
    })
  }
  
  closeForm()
}

watch(() => props.user, (user) => {
  if (user) {
    form.firstName = user.firstName
    form.lastName = user.lastName
    form.email = user.email
  } else {
    resetForm()
  }
}, { immediate: true })

watch(() => props.isOpen, (isOpen) => {
  if (!isOpen) {
    resetForm()
  }
})
</script><template>
  <div class="pagination" v-if="totalPages > 1">
    <div class="pagination-info">
      Показано {{ startItem }}-{{ endItem }} из {{ totalItems }}
    </div>
    
    <div class="pagination-controls">
      <button
        @click="goToPage(currentPage - 1)"
        :disabled="currentPage === 1"
        class="btn btn-page"
      >
        ‹ Назад
      </button>

      <button
        v-for="page in visiblePages"
        :key="page"
        @click="goToPage(page)"
        :class="['btn', 'btn-page', { 'btn-current': page === currentPage }]"
      >
        {{ page }}
      </button>

      <button
        @click="goToPage(currentPage + 1)"
        :disabled="currentPage === totalPages"
        class="btn btn-page"
      >
        Вперед ›
      </button>
    </div>

    <div class="items-per-page">
      <label for="itemsPerPage">На странице:</label>
      <select
        id="itemsPerPage"
        :value="itemsPerPage"
        @change="changeItemsPerPage"
        class="select"
      >
        <option value="5">5</option>
        <option value="10">10</option>
        <option value="20">20</option>
        <option value="50">50</option>
      </select>
    </div>
  </div>
</template>

<script setup lang="ts">
import { computed } from 'vue';


interface Props {
  currentPage: number
  totalPages: number
  totalItems: number
  itemsPerPage: number
}
const props = defineProps<Props>()

const emit = defineEmits<{
  'page-change': [page: number]
  'items-per-page-change': [itemsPerPage: number]
}>()

const startItem = computed(() => {
  return (props.currentPage - 1) * props.itemsPerPage + 1
})

const endItem = computed(() => {
  return Math.min(props.currentPage * props.itemsPerPage, props.totalItems)
})

const visiblePages = computed(() => {
  const pages = []
  const maxVisible = 5
  
  let start = Math.max(1, props.currentPage - Math.floor(maxVisible / 2))
  let end = Math.min(props.totalPages, start + maxVisible - 1)
  
  if (end - start + 1 < maxVisible) {
    start = Math.max(1, end - maxVisible + 1)
  }
  
  for (let i = start; i <= end; i++) {
    pages.push(i)
  }
  
  return pages
})

const goToPage = (page: number) => {
  if (page >= 1 && page <= props.totalPages && page !== props.currentPage) {
    emit('page-change', page)
  }
}

const changeItemsPerPage = (event: Event) => {
  const target = event.target as HTMLSelectElement
  const newItemsPerPage = parseInt(target.value)
  emit('items-per-page-change', newItemsPerPage)
}
</script>

<style scoped>
.pagination {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-top: 1rem;
  padding: 1rem;
  background-color: #f8f9fa;
  border-radius: 8px;
  flex-wrap: wrap;
  gap: 1rem;
}

.pagination-info {
  font-size: 0.875rem;
  color: #6c757d;
}

.pagination-controls {
  display: flex;
  gap: 0.25rem;
}

.btn {
  padding: 0.5rem 0.75rem;
  border: 1px solid #dee2e6;
  background-color: white;
  color: #007bff;
  cursor: pointer;
  border-radius: 4px;
  font-size: 0.875rem;
  transition: all 0.2s;
}

.btn:hover:not(:disabled) {
  background-color: #e9ecef;
}

.btn:disabled {
  color: #6c757d;
  cursor: not-allowed;
  background-color: #f8f9fa;
}

.btn-current {
  background-color: #007bff;
  color: white;
  border-color: #007bff;
}

.btn-current:hover {
  background-color: #0056b3;
}

.items-per-page {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  font-size: 0.875rem;
}

.select {
  padding: 0.25rem 0.5rem;
  border: 1px solid #dee2e6;
  border-radius: 4px;
  font-size: 0.875rem;
}

@media (max-width: 768px) {
  .pagination {
    flex-direction: column;
    align-items: stretch;
    text-align: center;
  }
  
  .pagination-controls {
    justify-content: center;
  }
}
</style><template>
  <div>
    <input 
      v-model="searchQuery"
      type="text" 
      placeholder="Search users by name or email..."
      @input="handleSearch"
      style="width: 100%; padding: 8px; margin: 10px 0; border: 1px solid #ccc; border-radius: 4px;"
    />
  </div>
</template>

<script setup lang="ts">
import { useUsersStore } from '../store/users'
import { ref } from 'vue'

const usersStore = useUsersStore()

const searchQuery = ref('')

const handleSearch = () => {
  usersStore.setSearchQuery(searchQuery.value)
}
</script><template>
  <div>
    <div>
      <button @click="openAddForm">Add User</button>
    </div>
    
    <UserSearch />
    
    <div v-if="usersStore.loading">Loading...</div>
    
    <table v-else>
      <thead>
        <tr>
          <th @click="sort('id')">
            ID {{ getSortIcon('id') }}
          </th>
          <th @click="sort('firstName')">
            First Name {{ getSortIcon('firstName') }}
          </th>
          <th @click="sort('lastName')">
            Last Name {{ getSortIcon('lastName') }}
          </th>
          <th @click="sort('email')">
            Email {{ getSortIcon('email') }}
          </th>
          <th @click="sort('lastVisitedAt')">
            Last Visit {{ getSortIcon('lastVisitedAt') }}
          </th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody>
        <tr v-for="user in usersStore.paginatedUsers" :key="user.id">
          <td>{{ user.id }}</td>
          <td>{{ user.firstName }}</td>
          <td>{{ user.lastName }}</td>
          <td>{{ user.email }}</td>
          <td>{{ formatDate(user.lastVisitedAt) }}</td>
          <td>
            <button @click="editUser(user)">Edit</button>
            <button @click="deleteUser(user.id)">Delete</button>
          </td>
        </tr>
      </tbody>
    </table>
    
    <div v-if="usersStore.totalPages > 1">
      <button 
        v-for="page in usersStore.totalPages" 
        :key="page"
        @click="usersStore.setPage(page)"
        :disabled="page === usersStore.currentPage"
      >
        {{ page }}
      </button>
    </div>
    
    <UserForm 
      :is-open="showForm" 
      :user="selectedUser" 
      @close="closeForm" 
    />

  </div>
</template>

<script setup lang="ts">
import type { User } from '../types/user'
import { useUsersStore } from '../store/users'
import { onMounted, ref } from 'vue'
import UserForm from './UserForm.vue'
import UserSearch from './UserSearch.vue'

const usersStore = useUsersStore()

const showForm = ref(false)
const selectedUser = ref<User | null>(null)

onMounted(() => {
  usersStore.loadUsers()
})

const openAddForm = () => {
  console.log('Opening add form')
  selectedUser.value = null
  showForm.value = true
}

const editUser = (user: User) => {
  selectedUser.value = { ...user }
  showForm.value = true
}

const deleteUser = (id: number) => {
  if (confirm('Are you sure you want to delete this user?')) {
    usersStore.deleteUser(id)
  }
}

const closeForm = () => {
  showForm.value = false
  selectedUser.value = null
}

const sort = (field: keyof User) => {
  const currentOrder = usersStore.sortField === field && usersStore.sortOrder === 'asc' ? 'desc' : 'asc'
  usersStore.setSorting(field, currentOrder)
}

const getSortIcon = (field: keyof User) => {
  if (usersStore.sortField !== field) return ''
  return usersStore.sortOrder === 'asc' ? '↑' : '↓'
}

const formatDate = (timestamp: number) => {
  return new Date(timestamp * 1000).toLocaleDateString()
}
</script>import { defineStore } from 'pinia'
import type { User } from '../types/user'

export const useUsersStore = defineStore('users', () => {
  const users = ref<User[]>([])
  const loading = ref(false)
  const searchQuery = ref('')
  const sortField = ref<keyof User>('id')
  const sortOrder = ref<'asc' | 'desc'>('asc')
  const currentPage = ref(1)
  const itemsPerPage = ref(10)

  const loadUsers = async () => {
    loading.value = true
    try {
      const data = await $fetch<User[]>('/userList.json')
      console.log('data: ', data)
      users.value = data || []
    } catch (error) {
      console.error('Failed to load users:', error)
    } finally {
      loading.value = false
    }
  }

  const addUser = (user: Omit<User, 'id'>) => {
    const newId = Math.max(...users.value.map(u => u.id), 0) + 1
    users.value.push({ ...user, id: newId })
  }

  const updateUser = (id: number, updatedUser: Partial<User>) => {
    console.log('updateUser: ', id, updatedUser)
    const index = users.value.findIndex(u => u.id === id)
    if (index !== -1) {
      users.value[index] = { ...users.value[index], ...updatedUser }
    }
  }

  const deleteUser = (id: number) => {
    users.value = users.value.filter(u => u.id !== id)
  }

  const filteredUsers = computed(() => {
    let filtered = users.value

    if (searchQuery.value) {
      const query = searchQuery.value.toLowerCase()
      filtered = filtered.filter(user => 
        user.firstName.toLowerCase().includes(query) ||
        user.lastName.toLowerCase().includes(query) ||
        user.email.toLowerCase().includes(query)
      )
    }

    filtered.sort((a, b) => {
      const aValue = a[sortField.value]
      const bValue = b[sortField.value]
      
      if (aValue < bValue) return sortOrder.value === 'asc' ? -1 : 1
      if (aValue > bValue) return sortOrder.value === 'asc' ? 1 : -1
      return 0
    })

    return filtered
  })

  const paginatedUsers = computed(() => {
    const start = (currentPage.value - 1) * itemsPerPage.value
    const end = start + itemsPerPage.value
    return filteredUsers.value.slice(start, end)
  })

  const totalPages = computed(() => 
    Math.ceil(filteredUsers.value.length / itemsPerPage.value)
  )

  const setSearchQuery = (query: string) => {
    searchQuery.value = query
    currentPage.value = 1
  }

  const setSorting = (field: keyof User, order: 'asc' | 'desc') => {
    sortField.value = field
    sortOrder.value = order
  }

  const setPage = (page: number) => {
    currentPage.value = page
  }

  return {
    users,
    loading,
    searchQuery,
    sortField,
    sortOrder,
    currentPage,
    itemsPerPage,
    filteredUsers,
    paginatedUsers,
    totalPages,
    loadUsers,
    addUser,
    updateUser,
    deleteUser,
    setSearchQuery,
    setSorting,
    setPage
  }
})export interface User {
  id: number;
  firstName: string;
  lastName: string;
  email: string;
  lastVisitedAt: number;
}